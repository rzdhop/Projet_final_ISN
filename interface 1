#!/bin/bash
# -*- coding: utf-8 -*-
import PIL.Image, os
from tkinter import*
from tkinter.filedialog import *

def Stega():
    global filepath,filepath2
    im_pass = PIL.Image.open(filepath)
    im_cont = PIL.Image.open(filepath2)
    width_pass, height_pass = im_pass.size #(x,y)
    width_cont, height_cont = im_cont.size #(x,y)
    if width_pass > width_cont or height_pass > height_cont:
        resize_pass = width_cont, height_cont
        resize_cont = width_cont*2, width_cont*2
        im_pass.thumbnail(resize_pass)
        im_cont.thumbnail(resize_cont)
    for x in range(width_pass):
        for y in range(height_pass):
            try:
                value_test = im_pass.getpixel((x,y))# form RGBA ==> rouge vert bleu Alpha(= Opacity)
                value_test2 = im_cont.getpixel((x,y))
            except IndexError:
                pass
            RGB_pass = []
            RGB_cont = []
            for i in value_test:
                tmp = str(format(i, "08b"))
                tmp2 = tmp[5:]
                RGB_pass.append(tmp2)
            for j in value_test2:
                tmp = str(format(j, "08b"))
                tmp2 = tmp[:3]
                RGB_cont.append(tmp2)
            RGB_final = []
            RGB_final.append(RGB_cont[0] + RGB_pass[0])
            RGB_final.append(RGB_cont[1] + RGB_pass[1])
            RGB_final.append(RGB_cont[2] + RGB_pass[2])
            RGB_decimal = []
            for a in range(0,3):
                RGB_decimal.append(int(RGB_final[a],2))
            tuple_RGB = (RGB_decimal[0],RGB_decimal[1],RGB_decimal[-1])
            print(f"==>{tuple_RGB} {x}/{width_pass} {y}/{height_pass}")
            try:
                im_cont.putpixel((x,y),tuple_RGB)
            except IndexError:
                pass
    im_cont.show()

def valid_imgpass():
    global filepath,check_selected,Select_img
    selected_img_pass_label = Label(fenetre_1,text="Img pass selected").place(relx= 0.5, rely= 0.25,anchor=CENTER)
    Select_img.destroy()
    check_selected += 1
    if check_selected == 2:
        Stega()
    else:
        pass
def valid_imgcont():
    global filepath2,check_selected,Select_img2
    selected_img_cont_label = Label(fenetre_1,text="Img cont selected").place(relx= 0.5, rely= 0.55,anchor=CENTER)
    Select_img2.destroy()
    check_selected += 1
    if check_selected == 2:
        Stega()
    else:
        pass
def img_cont():
    global photo2,fenetre_3,filepath2
    filepath2 = askopenfilename(title="Choisissez l'image",filetypes=[('png files','*.png'),('jpg files','*.jpg')])
    if len(filepath2) <= 1:
        pass
    else:
        valid_imgcont()

def img_pass():
    global photo,fenetre_2,filepath
    filepath = askopenfilename(title="Choisissez l'image",filetypes=[('png files','*.png'),('jpg files','*.JPG')])
    if len(filepath) <= 1:
        pass
    else:
        valid_imgpass()

def dimention_fen():
    global ecran_x
    #dimension et emplacement de la fentre au lancement du programme
    fenetre_1.geometry("800x600+0+0")
    ecran_x = fenetre_1.winfo_screenwidth()
    ecran_y = fenetre_1.winfo_screenheight()
    fenetre_x = 800
    fenetre_y = 600
    posX = (ecran_x // 2) - (fenetre_x // 2)
    posY = (ecran_y // 2) - (fenetre_y // 2)
    geo =("{}x{}+{}+{}".format(fenetre_x,fenetre_y,posX,posY))
    fenetre_1.geometry(geo)
    fenetre_1.minsize(650,400)#taille min en x*y

global ecran_x,check_selected
check_selected = 0
fenetre_1 = Tk()

fenetre_1.title("Stéganoraphie by Rida and Yasin")

dimention_fen()

#afficher l'image pour décripter
Select_img = Button(fenetre_1,text="selectionnez une image pass",command = img_pass)
Select_img.place(relx=0.5, rely=0.3,height= 50,width= 300, anchor=CENTER)

#afficher l'image conteneur
Select_img2 = Button(fenetre_1,text="selectionnez une image cont",command = img_cont)
Select_img2.place(relx=0.5, rely=0.5,height= 50,width= 300, anchor=CENTER)

#afficher une ligne de séparation
x1= ecran_x * 0.005
x2= ecran_x * 0.9
y1= 3
y2= 2
ligne_sepa = Canvas(fenetre_1,height = 10, width = 750)
ligne_sepa.create_line(x1,y1,x2,y2,width=5,fill='grey')
ligne_sepa.place(relx=0.5, rely=0.4, anchor=CENTER)

#Bouton quitter
boutton_quit = Button(fenetre_1,text="Quitter", command = fenetre_1.destroy).place(relx=0.85, rely=0.85,width= 100, height= 50, anchor=CENTER)

fenetre_1.mainloop()
